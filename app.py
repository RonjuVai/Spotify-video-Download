import os
import requests
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from telegram.error import TelegramError, NetworkError
import time
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Enhanced logging configuration
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')  # Log file for debugging
    ]
)
logger = logging.getLogger(__name__)

class SpotifySearchBot:
    def __init__(self):
        self.token = os.environ.get("TELEGRAM_BOT_TOKEN")
        self.api_url = "https://okatsu-rolezapiiz.vercel.app/search/spotify?q="
        self.start_time = time.time()
        
    async def start(self, update: Update, context: CallbackContext) -> None:
        """Enhanced start command with better design"""
        try:
            user = update.effective_user
            welcome_text = f"""
‚ú® *‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {user.first_name}!* ‚ú®

üéµ *Spotify Music Search Bot* ü§ñ

*‡¶Ü‡¶Æ‡¶ø ‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø:*
‚Ä¢ üîç ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡¶æ‡¶®, ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡¶æ‡¶Æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö
‚Ä¢ ‚ö° ‡¶≤‡¶æ‡¶á‡¶ü‡¶®‡¶ø‡¶Ç ‡¶´‡¶æ‡¶∏‡ßç‡¶ü ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü
‚Ä¢ üéß ‡¶π‡¶æ‡¶á ‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶â‡¶ú‡¶ø‡¶ï

*‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:*
1. ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ó‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
2. ‡¶Ö‡¶•‡¶¨‡¶æ /search ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®  
3. ‡¶Ö‡¶•‡¶¨‡¶æ /help ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

*‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:*
`/search Shape of You`
‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® `Blinding Lights`
            """
            
            keyboard = [
                [InlineKeyboardButton("üîç ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®", switch_inline_query_current_chat="")],
                [InlineKeyboardButton("üìö ‡¶π‡ßá‡¶≤‡ßç‡¶™", callback_data="help"), 
                 InlineKeyboardButton("üåü ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶∏", callback_data="features")],
                [InlineKeyboardButton("üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏", callback_data="status")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            logger.info(f"Start command used by {user.first_name} (ID: {user.id})")
            
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await update.message.reply_text("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

    async def help_command(self, update: Update, context: CallbackContext) -> None:
        """Enhanced help command"""
        help_text = """
üÜò *‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞*

*üìã ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü:*
/start - ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
/search <query> - ‡¶ó‡¶æ‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®  
/help - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
/status - ‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®

*üéØ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:*
‚Ä¢ Ed Sheeran
‚Ä¢ Shape of You  
‚Ä¢ Blinding Lights
‚Ä¢ Coldplay Adventure of a Lifetime
‚Ä¢ Taylor Swift

*üöÄ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶∏:*
‚úÖ 24/7 ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠
‚úÖ ‡¶∏‡•Å‡§™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö
‚úÖ ‡¶π‡¶æ‡¶á ‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø
‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶´‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶≤‡¶ø
‚úÖ ‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡ßá‡¶ï‡¶∂‡¶®

*üìû ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø:*
‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º, /start ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
        """
        
        keyboard = [
            [InlineKeyboardButton("üîç ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®", switch_inline_query_current_chat="Shape of You")],
            [InlineKeyboardButton("üè† ‡¶π‡ßã‡¶Æ", callback_data="home")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )

    async def status_command(self, update: Update, context: CallbackContext) -> None:
        """Bot status check"""
        uptime = time.time() - self.start_time
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        
        status_text = f"""
üìä *‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏*

‚úÖ *‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:* ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠
‚è∞ *‡¶Ü‡¶™‡¶ü‡¶æ‡¶á‡¶Æ:* {hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ {minutes} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
üöÄ *‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏:* ‡¶Ö‡¶™‡¶ü‡¶ø‡¶Æ‡¶æ‡¶≤
üîß *‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®:* 2.0

*‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶á‡¶®‡¶´‡ßã:*
‚Ä¢ ü§ñ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ: Connected
‚Ä¢ üåê API: Active  
‚Ä¢ üíæ ‡¶Æ‡ßá‡¶Æ‡¶∞‡¶ø: Stable

*‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü:* ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá /help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
        """
        
        await update.message.reply_text(status_text, parse_mode='Markdown')

    async def handle_search(self, update: Update, context: CallbackContext) -> None:
        """Enhanced search handler with better error handling"""
        try:
            query = ' '.join(context.args) if context.args else None
            
            if not query:
                if update.message.text and not update.message.text.startswith('/'):
                    query = update.message.text
                else:
                    await update.message.reply_text(
                        "‚ùå *‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®!*\n\n‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `/search Shape of You`\n‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®: `Shape of You`",
                        parse_mode='Markdown'
                    )
                    return
            
            # Query validation
            if len(query) < 2:
                await update.message.reply_text(
                    "‚ùå *‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ñ‡ßÅ‡¶¨ ‡¶õ‡ßã‡¶ü!*\n\n‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶¨‡¶°‡¶º ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§",
                    parse_mode='Markdown'
                )
                return
                
            if len(query) > 100:
                await update.message.reply_text(
                    "‚ùå *‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡¶°‡¶º!*\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
                    parse_mode='Markdown'
                )
                return
            
            await self.perform_search(update, query)
            
        except Exception as e:
            logger.error(f"Error in handle_search: {e}")
            await update.message.reply_text(
                "‚ùå *‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá!*\n\n‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ñ‡¶®‡¶á ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                parse_mode='Markdown'
            )

    async def perform_search(self, update: Update, query: str) -> None:
        """Perform search with enhanced error handling"""
        try:
            # Show beautiful searching message
            searching_text = f"""
üîç *Searching Spotify...*

*‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°:* `{query}`
*‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:* Processing...
‚è≥ *‡¶∏‡¶Æ‡¶Ø‡¶º:* Few seconds...
            """
            
            searching_msg = await update.message.reply_text(
                searching_text,
                parse_mode='Markdown'
            )
            
            # API request with timeout
            try:
                response = requests.get(f"{self.api_url}{query}", timeout=10)
                response.raise_for_status()
                
            except requests.exceptions.Timeout:
                await searching_msg.edit_text(
                    f"‚ùå *Timeout Error!*\n\n`{query}` - ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡•§\n\nüîß *‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:* ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                    parse_mode='Markdown'
                )
                return
                
            except requests.exceptions.RequestException as e:
                await searching_msg.edit_text(
                    f"‚ùå *Network Error!*\n\n‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§\n\nüîß *‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:* ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                    parse_mode='Markdown'
                )
                return

            if response.status_code == 200:
                data = response.json()
                await self.send_results(update, data, query, searching_msg)
            else:
                await searching_msg.edit_text(
                    f"‚ùå *API Error!*\n\n‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (Status: {response.status_code})\n\nüîß *‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:* ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Search error: {e}")
            try:
                await update.message.reply_text(
                    "‚ùå *Unexpected Error!*\n\n‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\nüîß *‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:* /start ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                    parse_mode='Markdown'
                )
            except:
                pass

    async def send_results(self, update: Update, data: dict, query: str, searching_msg) -> None:
        """Send formatted results with enhanced design"""
        try:
            if not data or 'tracks' not in data or not data['tracks']:
                no_results_text = f"""
‚ùå *No Results Found!*

`{query}` - ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡¶æ‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§

üí° *‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®:*
‚Ä¢ ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶∏‡ßç‡¶™‡ßá‡¶≤‡¶ø‡¶Ç ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®  
‚Ä¢ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `Shape of You`, `Blinding Lights`
                """
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö", switch_inline_query_current_chat="")],
                    [InlineKeyboardButton("üìö ‡¶π‡ßá‡¶≤‡ßç‡¶™", callback_data="help")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await searching_msg.edit_text(
                    no_results_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return

            tracks = data['tracks'][:6]  # Show first 6 results
        
            results_text = f"""
üéµ *Search Results* üéµ

*‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°:* `{query}`
*‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü:* {len(tracks)} ‡¶ü‡¶ø ‡¶ó‡¶æ‡¶®

"""
        
            keyboard = []
        
            for i, track in enumerate(tracks, 1):
                name = track.get('name', 'Unknown Track')
                artist = track.get('artist', 'Unknown Artist')
                album = track.get('album', 'Unknown Album')
            
                results_text += f"*{i}. {name}*\n"
                results_text += f"   üë§ *Artist:* {artist}\n"
                results_text += f"   üíø *Album:* {album}\n\n"
            
                # Add button for each track
                button_text = f"üéµ {i}. {name[:25]}{'...' if len(name) > 25 else ''}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"track_{i}")])
        
            # Add additional buttons
            keyboard.extend([
                [InlineKeyboardButton("üîÑ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö", switch_inline_query_current_chat="")],
                [InlineKeyboardButton("üìö ‡¶π‡ßá‡¶≤‡ßç‡¶™", callback_data="help"),
                 InlineKeyboardButton("üè† ‡¶π‡ßã‡¶Æ", callback_data="home")]
            ])
        
            reply_markup = InlineKeyboardMarkup(keyboard)
        
            await searching_msg.edit_text(
                results_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error sending results: {e}")
            await searching_msg.edit_text(
                "‚ùå *Results display error!*\n\n‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§\n\nüîß *‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:* ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                parse_mode='Markdown'
            )

    async def button_handler(self, update: Update, context: CallbackContext) -> None:
        """Enhanced button handler"""
        query = update.callback_query
        await query.answer()
        
        try:
            data = query.data
        
            if data == "help":
                await self.help_command(update, context)
            elif data == "home" or data == "start":
                await self.start(update, context)
            elif data == "features":
                features_text = """
üåü *‡¶¨‡¶ü ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶∏*

*üöÄ ‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏:*
‚Ä¢ ‡¶∏‡•Å‡§™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö
‚Ä¢ 24/7 ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠
‚Ä¢ ‡¶≤‡ßã ‡¶≤‡ßá‡¶ü‡ßá‡¶®‡ßç‡¶∏‡¶ø

*üéµ ‡¶Æ‡¶ø‡¶â‡¶ú‡¶ø‡¶ï ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶∏:*
‚Ä¢ ‡¶ó‡¶æ‡¶®, ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶∏‡ßç‡¶ü, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡¶æ‡¶Æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö
‚Ä¢ ‡¶π‡¶æ‡¶á ‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶°‡¶ø‡¶ì
‚Ä¢ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡ßç‡¶° ‡¶á‡¶®‡¶´‡ßã

*üîß ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡¶æ‡¶≤:*
‚Ä¢ ‡¶Ö‡¶ü‡ßã ‡¶∞‡¶ø‡¶ï‡¶≠‡¶æ‡¶∞‡¶ø
‚Ä¢ ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
‚Ä¢ ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü

*üì± ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶∏:*
‚Ä¢ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ & ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü
‚Ä¢ ‡¶á‡¶®‡¶ü‡ßÅ‡¶á‡¶ü‡¶ø‡¶≠ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®
‚Ä¢ ‡¶ï‡ßÅ‡¶á‡¶ï ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏
                """
                await query.edit_message_text(features_text, parse_mode='Markdown')
            elif data == "status":
                await self.status_command(update, context)
            elif data.startswith("track_"):
                track_num = int(data.split("_")[1])
                track_text = f"""
üéµ *Track {track_num} Selected*

‚úÖ ‡¶è‡¶á ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!

üöÄ *‡¶ï‡¶Æ‡¶ø‡¶Ç ‡¶∏‡ßÅ‡¶®:*  
‚Ä¢ ‡¶™‡ßç‡¶≤‡ßá ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞  
‚Ä¢ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶Ö‡¶™‡¶∂‡¶®
‚Ä¢ ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞

üì¢ *‡¶®‡ßã‡¶ü:* ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá! 
‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡¶æ‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                """
                await query.edit_message_text(track_text, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"Button handler error: {e}")
            await query.edit_message_text("‚ùå ‡¶¨‡¶æ‡¶ü‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ! /start ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")

    async def error_handler(self, update: Update, context: CallbackContext) -> None:
        """Global error handler"""
        try:
            logger.error(f"Exception while handling an update: {context.error}")
            
            # Don't send error message if it's a network error (user won't see it anyway)
            if isinstance(context.error, NetworkError):
                return
                
            if update and update.effective_message:
                error_text = """
‚ùå *System Error Occurred!*

üîß ‡¶Ö‡¶ü‡ßã ‡¶∞‡¶ø‡¶ï‡¶≠‡¶æ‡¶∞‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠...
üîÑ ‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá...

‚úÖ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                """
                await update.effective_message.reply_text(
                    error_text,
                    parse_mode='Markdown'
                )
        except:
            pass

    def run(self):
        """Run the bot with enhanced stability"""
        try:
            # Create application with better configuration
            application = Application.builder().token(self.token).build()
            
            # Add enhanced handlers
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("search", self.handle_search))
            application.add_handler(CommandHandler("status", self.status_command))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_search))
            application.add_handler(CallbackQueryHandler(self.button_handler))
            
            # Add error handler
            application.add_error_handler(self.error_handler)
            
            # Start the bot with better polling configuration
            print("ü§ñ Bot is starting with enhanced stability...")
            print(f"‚úÖ Start Time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
            print("üîß Configuration: Stable Mode Active")
            
            # Run with enhanced polling settings
            application.run_polling(
                poll_interval=1.0,
                timeout=30,
                drop_pending_updates=True
            )
            
        except Exception as e:
            logger.critical(f"Bot crashed: {e}")
            print(f"üî¥ Bot crashed at {time.strftime('%Y-%m-%d %H:%M:%S')}")
            print("üîÑ Attempting auto-restart in 10 seconds...")
            time.sleep(10)
            self.run()  # Auto-restart

if __name__ == "__main__":
    bot = SpotifySearchBot()
    bot.run()
