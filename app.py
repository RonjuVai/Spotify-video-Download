import os
import requests
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SpotifySearchBot:
    def __init__(self):
        self.token = os.environ.get("TELEGRAM_BOT_TOKEN")
        self.api_url = "https://okatsu-rolezapiiz.vercel.app/search/spotify?q="
        
    async def start(self, update: Update, context: CallbackContext) -> None:
        """Start command with beautiful design"""
        user = update.effective_user
        welcome_text = f"""
üéµ *‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {user.first_name}!* üéµ

‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø *Spotify Search Bot* ü§ñ  
‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡¶æ‡¶®, ‡¶Ü‡¶∞‡ßç‡¶ü‡¶ø‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡¶æ‡¶Æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!

*‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:*  
1. ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ó‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®  
2. ‡¶Ö‡¶•‡¶¨‡¶æ /search ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®  
3. ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶Æ‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®

*‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:*  
`/search Shape of You`  
‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® `Shape of You`
        """
        
        keyboard = [
            [InlineKeyboardButton("üîç ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®", switch_inline_query_current_chat="")],
            [InlineKeyboardButton("üìö ‡¶π‡ßá‡¶≤‡ßç‡¶™", callback_data="help"), 
             InlineKeyboardButton("‚ÑπÔ∏èÂÖ≥‰∫é", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def help_command(self, update: Update, context: CallbackContext) -> None:
        """Help command"""
        help_text = """
*üÜò ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞*

*‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü:*
/start - ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
/search <query> - ‡¶ó‡¶æ‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®
/help - ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®

*‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:*
‚Ä¢ Ed Sheeran
‚Ä¢ Shape of You
‚Ä¢ Blinding Lights
‚Ä¢ Coldplay Adventure of a Lifetime

*‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶∏:*
‚úÖ 24/7 ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠
‚úÖ ‡¶´‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö
‚úÖ ‡¶π‡¶æ‡¶á ‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ
‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶´‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶≤‡¶ø
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def handle_search(self, update: Update, context: CallbackContext) -> None:
        """Handle search queries"""
        query = ' '.join(context.args) if context.args else None
        
        if not query:
            if update.message.text and not update.message.text.startswith('/'):
                query = update.message.text
            else:
                await update.message.reply_text(
                    "‚ùå *‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®*\n\n‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `/search Shape of You`",
                    parse_mode='Markdown'
                )
                return
        
        await self.perform_search(update, query)

    async def perform_search(self, update: Update, query: str) -> None:
        """Perform actual search and send results"""
        try:
            # Show searching message
            searching_msg = await update.message.reply_text(
                f"üîç *Searching for:* `{query}`\n\n‚è≥ Please wait...",
                parse_mode='Markdown'
            )
            
            # Make API request
            response = requests.get(f"{self.api_url}{query}")
            
            if response.status_code == 200:
                data = response.json()
                await self.send_results(update, data, query, searching_msg)
            else:
                await searching_msg.edit_text(
                    "‚ùå *Search Failed*\n\n‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Search error: {e}")
            await update.message.reply_text(
                "‚ùå *Error Occurred*\n\n‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                parse_mode='Markdown'
            )

    async def send_results(self, update: Update, data: dict, query: str, searching_msg) -> None:
        """Send formatted results"""
        if not data or 'tracks' not in data or not data['tracks']:
            await searching_msg.edit_text(
                f"‚ùå *No Results Found*\n\n`{query}` - ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§\n\n‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶®‡¶æ‡¶Æ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                parse_mode='Markdown'
            )
            return

        tracks = data['tracks'][:5]  # Show first 5 results
        
        results_text = f"üéµ *Search Results for:* `{query}`\n\n"
        results_text += f"üìä *Found {len(tracks)} results*\n\n"
        
        keyboard = []
        
        for i, track in enumerate(tracks, 1):
            name = track.get('name', 'Unknown')
            artist = track.get('artist', 'Unknown Artist')
            album = track.get('album', 'Unknown Album')
            
            results_text += f"*{i}. {name}*\n"
            results_text += f"   üë§ {artist}\n"
            results_text += f"   üíø {album}\n\n"
            
            # Add button for each track
            keyboard.append([InlineKeyboardButton(
                f"üéµ {i}. {name[:20]}...", 
                callback_data=f"track_{i}"
            )])
        
        # Add additional buttons
        keyboard.append([
            InlineKeyboardButton("üîç New Search", switch_inline_query_current_chat=""),
            InlineKeyboardButton("üìû Support", url="https://t.me/your_support")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await searching_msg.edit_text(
            results_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def button_handler(self, update: Update, context: CallbackContext) -> None:
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "help":
            await self.help_command(update, context)
        elif data == "about":
            about_text = """
*‚ÑπÔ∏è About This Bot*

*Spotify Search Bot*  
Version: 1.0  
Developer: Your Name  
API: Spotify Search API

*Features:*
‚Ä¢ Fast music search
‚Ä¢ High quality streaming
‚Ä¢ User-friendly interface
‚Ä¢ 24/7 availability

*Contact:* @your_username
            """
            await query.edit_message_text(about_text, parse_mode='Markdown')
        elif data.startswith("track_"):
            track_num = int(data.split("_")[1])
            await query.edit_message_text(
                f"üéµ *Track {track_num} Selected*\n\n‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá!",
                parse_mode='Markdown'
            )

    async def inline_query(self, update: Update, context: CallbackContext) -> None:
        """Handle inline queries"""
        query = update.inline_query.query
        
        if not query:
            return
        
        # You can implement inline search here
        results = []
        await update.inline_query.answer(results)

    def run(self):
        """Run the bot"""
        application = Application.builder().token(self.token).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("search", self.handle_search))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_search))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # Start the bot
        print("ü§ñ Bot is running...")
        application.run_polling()

if __name__ == "__main__":
    bot = SpotifySearchBot()
    bot.run()